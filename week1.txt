Problem 1:
Big O Notation is the measure of space and time complexity between data and the number of operations. Measuring performance is based on the number of operations.

Problem 2: 
Rank: 1 being the best and 5 being the worst.
1: O(1) - Constant Time
2: O(logn) - Logarithmic time complexity.
3: O(n) - Linear time complexity.
4: O(n^2) - Quadratic time complexity.
5: O(n!) - Factorial algorithm

The further you scale up the graph the time complexity becomes worse. Therefore, it is important to keep in mind how many operations one is using to ensure the scale of the application is scalable and provides the fastest and accuarte experience as possible. This however, is not always attainable, but keeping Big O in our minds when producing code will help keep us mindful when working with big scale applications. 

Problem 3: 
1: scalability
2: Code compentency
3: Money! 

Problem 4: 
It is dependent on our machines. The better hardware we have determines how past performance.now() operates. However, it does give us a good birds eye view. 

Problem 5: 
Total time complexity is the amount of inputs there are with total operations.
Consolidated time complexity is all inputs and operations watered down to the slowest time.  

Total Time:
O(1) n + n + n^2 = 3n^2;

Consolidated time: 
O(n^2);

Problem 6: 
Total: O(1) + n + O(1) + n^3 = 2n^3;
Consolidated: O(n^3); 

Problem 7: 
We can ingnore the constants because we are more concerned with the trend, but also everything becomes depenedent on how fast 3 nested for loops as an example. Essentially the heavy computations will have the worse time complexity and that is going to have a major impact on the performance of the code. 

Problem 8: 
Space complexity helps us analyze how much additional memory we need to allocate to compute our algorithm. We care because the less amount of space we take up the faster the code can execute. 

Problem 9: 
Boolean: Constant
Undefined: Constant
Null: Constant
Numbers: Constant
String: Linear
Array: Linear
Object: Linear

Problem 10: 
Array: You should use an array when you need fast access to elements and need a specific order.
Object: Use an object when there is no need for ordering and do not need fast access to the elements.

Problem 11:
obj.age = 44; Constant
delete obj.age; Constant
obj.hasOwnProperty['name]; Constant, but I believe this may be Linear.
for (const prop in obj) {    Linear
    console.log(obj[prop]);
};
obj.age; Constant
Object.keys(obj); Linear
Object.values(obj); Linear

Problem 12:
arr2.push(8); O(1) Constant
arr2.unshift(0); O(n) Linear
arr2.pop(); Constant
arr2.shift(); Linear
const findNumber = arr2.find(num => num ===2); Linear
for (let i = ; i < arr2.length; i++) {         Linear
    if(arr2[i] === 2) {
        return arr2[i]
    };
};
const getNumber = arr2[3]; Constant 
const double = arr2.map(num =M num * 2); Linear
const removeAndAddNewNumber = arr2.splice(1,1,5); Linear
const getSum = arr2.reduce((total, num) => total + num, 0); Linear
for (const num of nums) {       Linear
    console.log(num * 2);
};
const convertToString = arr2.join('); Linear

Problem 13: 
1: Linear for time because of the loop and Linear for space because i has to look at each number.
2: Constant for time and space because you are pushing and inserting into an empty array. 
3: Linear for time because you are searching for the correct value, but the space is constant because you are always targeting the last index and you do not have to loop through.
4: The time is Linear with the for loop looping through the array and the space is constant because you are retrieving what is in the index of that array. 
5: Both the space and time here are constant because you are performing a mathmatical operation and not having to loop through anything. It's comparing values. 
6:This one was tricky for me, but I believe it is constant because you are comparing numbers for time and I believe the space is linear because we have to compare the provided number to certain parts of the array values. However, I am not entirely sure. 
7: This is Quadratic for time because of the two forEach methods. The space complexity is constant because you are pushing values you top of one another and not needing to reorder the index.
8: Again another Quadratic for time because of the while and for loops and then for space it is constant because you are counting up? I'm a little unsure here. 
9: Time is Quadratic due to the forEach & includes loop and space is constant because we are pushing the value onto the array.
10: Quadratic because of the reduce and filter methods and the space is linear because of comparing and adding values together. Still unsure of this. 
